{"version":3,"sources":["webpack:///component---src-templates-blog-post-js-18bc471da8298aa9baf4.js","webpack:///./~/tinycolor2/tinycolor.js","webpack:///./src/components/H2/index.js","webpack:///./src/templates/blogPost.js","webpack:///./src/utils/breakpoints.js?21f7","webpack:///./src/utils/palette.js?66e8"],"names":["webpackJsonp","95","module","exports","__webpack_require__","__WEBPACK_AMD_DEFINE_RESULT__","Math","tinycolor","color","opts","this","rgb","inputToRGB","_originalInput","_r","r","_g","g","_b","b","_a","a","_roundA","mathRound","_format","format","_gradientType","gradientType","_ok","ok","_tc_id","tinyCounter","s","v","l","stringInputToObject","isValidCSSUnit","rgbToRgb","String","substr","h","convertToPercentage","hsvToRgb","hslToRgb","hasOwnProperty","boundAlpha","mathMin","mathMax","bound01","rgbToHsl","max","min","d","hue2rgb","p","q","t","rgbToHsv","i","floor","f","mod","rgbToHex","allow3Char","hex","pad2","toString","charAt","join","rgbaToHex","allow4Char","convertDecimalToHex","rgbaToArgbHex","desaturate","amount","hsl","toHsl","clamp01","saturate","greyscale","lighten","brighten","toRgb","darken","spin","hue","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","ret","push","monochromatic","hsv","toHsv","modification","flip","o","flipped","parseFloat","isNaN","n","isOnePointZero","processPercent","isPercentage","parseInt","abs","val","parseIntFromHex","indexOf","c","length","round","convertHexToDecimal","matchers","CSS_UNIT","exec","replace","trimLeft","trimRight","toLowerCase","named","names","match","rgba","hsla","hsva","hex8","hex6","hex4","hex3","validateWCAG2Parms","parms","level","size","toUpperCase","mathRandom","random","prototype","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","R","G","B","pow","setAlpha","value","toHsvString","toHslString","toHex","toHexString","toHex8","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","needsAlphaFormat","clone","_applyModification","fn","args","apply","concat","slice","call","arguments","_applyCombination","fromRatio","newColor","equals","color1","color2","mix","rgb1","rgb2","readability","c1","c2","isReadable","wcag2","wcag2Parms","out","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","CSS_INTEGER","CSS_NUMBER","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","undefined","98","_interopRequireDefault","obj","__esModule","default","_reactEmotion","_reactEmotion2","_tinycolor","_tinycolor2","_palette","_palette2","target","dark","fontWeight","fontSize","margin","277","query","_styled","_react","_react2","_reactHelmet","_reactHelmet2","_gatsbyLink","_gatsbyLink2","_H","_H2","_H3","_H4","_breakpoints","_breakpoints2","Layout","display","gridTemplateColumns","smallerThan","small","flexDirection","TitleBlock","alignItems","borderBottom","flexWrap","justifyContent","marginBottom","paddingBottom","_ref","_ref$data","data","siteMetadata","site","post","markdownRemark","createElement","title","frontmatter","className","css","to","marginRight","date","gridColumn","dangerouslySetInnerHTML","__html","html","33","breakpoint","11","primary","primaryDark","light","xDark"],"mappings":"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","file":"component---src-templates-blog-post-js-18bc471da8298aa9baf4.js","sourcesContent":["webpackJsonp([107818501498521],{\n\n/***/ 95:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1\n\t// https://github.com/bgrins/TinyColor\n\t// Brian Grinstead, MIT License\n\t\n\t(function(Math) {\n\t\n\tvar trimLeft = /^\\s+/,\n\t    trimRight = /\\s+$/,\n\t    tinyCounter = 0,\n\t    mathRound = Math.round,\n\t    mathMin = Math.min,\n\t    mathMax = Math.max,\n\t    mathRandom = Math.random;\n\t\n\tfunction tinycolor (color, opts) {\n\t\n\t    color = (color) ? color : '';\n\t    opts = opts || { };\n\t\n\t    // If input is already a tinycolor, return itself\n\t    if (color instanceof tinycolor) {\n\t       return color;\n\t    }\n\t    // If we are called as a function, call using new instead\n\t    if (!(this instanceof tinycolor)) {\n\t        return new tinycolor(color, opts);\n\t    }\n\t\n\t    var rgb = inputToRGB(color);\n\t    this._originalInput = color,\n\t    this._r = rgb.r,\n\t    this._g = rgb.g,\n\t    this._b = rgb.b,\n\t    this._a = rgb.a,\n\t    this._roundA = mathRound(100*this._a) / 100,\n\t    this._format = opts.format || rgb.format;\n\t    this._gradientType = opts.gradientType;\n\t\n\t    // Don't let the range of [0,255] come back in [0,1].\n\t    // Potentially lose a little bit of precision here, but will fix issues where\n\t    // .5 gets interpreted as half of the total, instead of half of 1\n\t    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n\t    if (this._r < 1) { this._r = mathRound(this._r); }\n\t    if (this._g < 1) { this._g = mathRound(this._g); }\n\t    if (this._b < 1) { this._b = mathRound(this._b); }\n\t\n\t    this._ok = rgb.ok;\n\t    this._tc_id = tinyCounter++;\n\t}\n\t\n\ttinycolor.prototype = {\n\t    isDark: function() {\n\t        return this.getBrightness() < 128;\n\t    },\n\t    isLight: function() {\n\t        return !this.isDark();\n\t    },\n\t    isValid: function() {\n\t        return this._ok;\n\t    },\n\t    getOriginalInput: function() {\n\t      return this._originalInput;\n\t    },\n\t    getFormat: function() {\n\t        return this._format;\n\t    },\n\t    getAlpha: function() {\n\t        return this._a;\n\t    },\n\t    getBrightness: function() {\n\t        //http://www.w3.org/TR/AERT#color-contrast\n\t        var rgb = this.toRgb();\n\t        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n\t    },\n\t    getLuminance: function() {\n\t        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n\t        var rgb = this.toRgb();\n\t        var RsRGB, GsRGB, BsRGB, R, G, B;\n\t        RsRGB = rgb.r/255;\n\t        GsRGB = rgb.g/255;\n\t        BsRGB = rgb.b/255;\n\t\n\t        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n\t        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n\t        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n\t        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n\t    },\n\t    setAlpha: function(value) {\n\t        this._a = boundAlpha(value);\n\t        this._roundA = mathRound(100*this._a) / 100;\n\t        return this;\n\t    },\n\t    toHsv: function() {\n\t        var hsv = rgbToHsv(this._r, this._g, this._b);\n\t        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n\t    },\n\t    toHsvString: function() {\n\t        var hsv = rgbToHsv(this._r, this._g, this._b);\n\t        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n\t        return (this._a == 1) ?\n\t          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n\t          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n\t    },\n\t    toHsl: function() {\n\t        var hsl = rgbToHsl(this._r, this._g, this._b);\n\t        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n\t    },\n\t    toHslString: function() {\n\t        var hsl = rgbToHsl(this._r, this._g, this._b);\n\t        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n\t        return (this._a == 1) ?\n\t          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n\t          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n\t    },\n\t    toHex: function(allow3Char) {\n\t        return rgbToHex(this._r, this._g, this._b, allow3Char);\n\t    },\n\t    toHexString: function(allow3Char) {\n\t        return '#' + this.toHex(allow3Char);\n\t    },\n\t    toHex8: function(allow4Char) {\n\t        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n\t    },\n\t    toHex8String: function(allow4Char) {\n\t        return '#' + this.toHex8(allow4Char);\n\t    },\n\t    toRgb: function() {\n\t        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n\t    },\n\t    toRgbString: function() {\n\t        return (this._a == 1) ?\n\t          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n\t          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n\t    },\n\t    toPercentageRgb: function() {\n\t        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n\t    },\n\t    toPercentageRgbString: function() {\n\t        return (this._a == 1) ?\n\t          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n\t          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n\t    },\n\t    toName: function() {\n\t        if (this._a === 0) {\n\t            return \"transparent\";\n\t        }\n\t\n\t        if (this._a < 1) {\n\t            return false;\n\t        }\n\t\n\t        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n\t    },\n\t    toFilter: function(secondColor) {\n\t        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n\t        var secondHex8String = hex8String;\n\t        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\t\n\t        if (secondColor) {\n\t            var s = tinycolor(secondColor);\n\t            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n\t        }\n\t\n\t        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n\t    },\n\t    toString: function(format) {\n\t        var formatSet = !!format;\n\t        format = format || this._format;\n\t\n\t        var formattedString = false;\n\t        var hasAlpha = this._a < 1 && this._a >= 0;\n\t        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\t\n\t        if (needsAlphaFormat) {\n\t            // Special case for \"transparent\", all other non-alpha formats\n\t            // will return rgba when there is transparency.\n\t            if (format === \"name\" && this._a === 0) {\n\t                return this.toName();\n\t            }\n\t            return this.toRgbString();\n\t        }\n\t        if (format === \"rgb\") {\n\t            formattedString = this.toRgbString();\n\t        }\n\t        if (format === \"prgb\") {\n\t            formattedString = this.toPercentageRgbString();\n\t        }\n\t        if (format === \"hex\" || format === \"hex6\") {\n\t            formattedString = this.toHexString();\n\t        }\n\t        if (format === \"hex3\") {\n\t            formattedString = this.toHexString(true);\n\t        }\n\t        if (format === \"hex4\") {\n\t            formattedString = this.toHex8String(true);\n\t        }\n\t        if (format === \"hex8\") {\n\t            formattedString = this.toHex8String();\n\t        }\n\t        if (format === \"name\") {\n\t            formattedString = this.toName();\n\t        }\n\t        if (format === \"hsl\") {\n\t            formattedString = this.toHslString();\n\t        }\n\t        if (format === \"hsv\") {\n\t            formattedString = this.toHsvString();\n\t        }\n\t\n\t        return formattedString || this.toHexString();\n\t    },\n\t    clone: function() {\n\t        return tinycolor(this.toString());\n\t    },\n\t\n\t    _applyModification: function(fn, args) {\n\t        var color = fn.apply(null, [this].concat([].slice.call(args)));\n\t        this._r = color._r;\n\t        this._g = color._g;\n\t        this._b = color._b;\n\t        this.setAlpha(color._a);\n\t        return this;\n\t    },\n\t    lighten: function() {\n\t        return this._applyModification(lighten, arguments);\n\t    },\n\t    brighten: function() {\n\t        return this._applyModification(brighten, arguments);\n\t    },\n\t    darken: function() {\n\t        return this._applyModification(darken, arguments);\n\t    },\n\t    desaturate: function() {\n\t        return this._applyModification(desaturate, arguments);\n\t    },\n\t    saturate: function() {\n\t        return this._applyModification(saturate, arguments);\n\t    },\n\t    greyscale: function() {\n\t        return this._applyModification(greyscale, arguments);\n\t    },\n\t    spin: function() {\n\t        return this._applyModification(spin, arguments);\n\t    },\n\t\n\t    _applyCombination: function(fn, args) {\n\t        return fn.apply(null, [this].concat([].slice.call(args)));\n\t    },\n\t    analogous: function() {\n\t        return this._applyCombination(analogous, arguments);\n\t    },\n\t    complement: function() {\n\t        return this._applyCombination(complement, arguments);\n\t    },\n\t    monochromatic: function() {\n\t        return this._applyCombination(monochromatic, arguments);\n\t    },\n\t    splitcomplement: function() {\n\t        return this._applyCombination(splitcomplement, arguments);\n\t    },\n\t    triad: function() {\n\t        return this._applyCombination(triad, arguments);\n\t    },\n\t    tetrad: function() {\n\t        return this._applyCombination(tetrad, arguments);\n\t    }\n\t};\n\t\n\t// If input is an object, force 1 into \"1.0\" to handle ratios properly\n\t// String input requires \"1.0\" as input, so 1 will be treated as 1\n\ttinycolor.fromRatio = function(color, opts) {\n\t    if (typeof color == \"object\") {\n\t        var newColor = {};\n\t        for (var i in color) {\n\t            if (color.hasOwnProperty(i)) {\n\t                if (i === \"a\") {\n\t                    newColor[i] = color[i];\n\t                }\n\t                else {\n\t                    newColor[i] = convertToPercentage(color[i]);\n\t                }\n\t            }\n\t        }\n\t        color = newColor;\n\t    }\n\t\n\t    return tinycolor(color, opts);\n\t};\n\t\n\t// Given a string or object, convert that input to RGB\n\t// Possible string inputs:\n\t//\n\t//     \"red\"\n\t//     \"#f00\" or \"f00\"\n\t//     \"#ff0000\" or \"ff0000\"\n\t//     \"#ff000000\" or \"ff000000\"\n\t//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n\t//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n\t//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n\t//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n\t//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n\t//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n\t//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n\t//\n\tfunction inputToRGB(color) {\n\t\n\t    var rgb = { r: 0, g: 0, b: 0 };\n\t    var a = 1;\n\t    var s = null;\n\t    var v = null;\n\t    var l = null;\n\t    var ok = false;\n\t    var format = false;\n\t\n\t    if (typeof color == \"string\") {\n\t        color = stringInputToObject(color);\n\t    }\n\t\n\t    if (typeof color == \"object\") {\n\t        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n\t            rgb = rgbToRgb(color.r, color.g, color.b);\n\t            ok = true;\n\t            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n\t        }\n\t        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n\t            s = convertToPercentage(color.s);\n\t            v = convertToPercentage(color.v);\n\t            rgb = hsvToRgb(color.h, s, v);\n\t            ok = true;\n\t            format = \"hsv\";\n\t        }\n\t        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n\t            s = convertToPercentage(color.s);\n\t            l = convertToPercentage(color.l);\n\t            rgb = hslToRgb(color.h, s, l);\n\t            ok = true;\n\t            format = \"hsl\";\n\t        }\n\t\n\t        if (color.hasOwnProperty(\"a\")) {\n\t            a = color.a;\n\t        }\n\t    }\n\t\n\t    a = boundAlpha(a);\n\t\n\t    return {\n\t        ok: ok,\n\t        format: color.format || format,\n\t        r: mathMin(255, mathMax(rgb.r, 0)),\n\t        g: mathMin(255, mathMax(rgb.g, 0)),\n\t        b: mathMin(255, mathMax(rgb.b, 0)),\n\t        a: a\n\t    };\n\t}\n\t\n\t\n\t// Conversion Functions\n\t// --------------------\n\t\n\t// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n\t// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\t\n\t// `rgbToRgb`\n\t// Handle bounds / percentage checking to conform to CSS color spec\n\t// <http://www.w3.org/TR/css3-color/>\n\t// *Assumes:* r, g, b in [0, 255] or [0, 1]\n\t// *Returns:* { r, g, b } in [0, 255]\n\tfunction rgbToRgb(r, g, b){\n\t    return {\n\t        r: bound01(r, 255) * 255,\n\t        g: bound01(g, 255) * 255,\n\t        b: bound01(b, 255) * 255\n\t    };\n\t}\n\t\n\t// `rgbToHsl`\n\t// Converts an RGB color value to HSL.\n\t// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n\t// *Returns:* { h, s, l } in [0,1]\n\tfunction rgbToHsl(r, g, b) {\n\t\n\t    r = bound01(r, 255);\n\t    g = bound01(g, 255);\n\t    b = bound01(b, 255);\n\t\n\t    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n\t    var h, s, l = (max + min) / 2;\n\t\n\t    if(max == min) {\n\t        h = s = 0; // achromatic\n\t    }\n\t    else {\n\t        var d = max - min;\n\t        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t        switch(max) {\n\t            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t            case g: h = (b - r) / d + 2; break;\n\t            case b: h = (r - g) / d + 4; break;\n\t        }\n\t\n\t        h /= 6;\n\t    }\n\t\n\t    return { h: h, s: s, l: l };\n\t}\n\t\n\t// `hslToRgb`\n\t// Converts an HSL color value to RGB.\n\t// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n\t// *Returns:* { r, g, b } in the set [0, 255]\n\tfunction hslToRgb(h, s, l) {\n\t    var r, g, b;\n\t\n\t    h = bound01(h, 360);\n\t    s = bound01(s, 100);\n\t    l = bound01(l, 100);\n\t\n\t    function hue2rgb(p, q, t) {\n\t        if(t < 0) t += 1;\n\t        if(t > 1) t -= 1;\n\t        if(t < 1/6) return p + (q - p) * 6 * t;\n\t        if(t < 1/2) return q;\n\t        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\t        return p;\n\t    }\n\t\n\t    if(s === 0) {\n\t        r = g = b = l; // achromatic\n\t    }\n\t    else {\n\t        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t        var p = 2 * l - q;\n\t        r = hue2rgb(p, q, h + 1/3);\n\t        g = hue2rgb(p, q, h);\n\t        b = hue2rgb(p, q, h - 1/3);\n\t    }\n\t\n\t    return { r: r * 255, g: g * 255, b: b * 255 };\n\t}\n\t\n\t// `rgbToHsv`\n\t// Converts an RGB color value to HSV\n\t// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n\t// *Returns:* { h, s, v } in [0,1]\n\tfunction rgbToHsv(r, g, b) {\n\t\n\t    r = bound01(r, 255);\n\t    g = bound01(g, 255);\n\t    b = bound01(b, 255);\n\t\n\t    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n\t    var h, s, v = max;\n\t\n\t    var d = max - min;\n\t    s = max === 0 ? 0 : d / max;\n\t\n\t    if(max == min) {\n\t        h = 0; // achromatic\n\t    }\n\t    else {\n\t        switch(max) {\n\t            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t            case g: h = (b - r) / d + 2; break;\n\t            case b: h = (r - g) / d + 4; break;\n\t        }\n\t        h /= 6;\n\t    }\n\t    return { h: h, s: s, v: v };\n\t}\n\t\n\t// `hsvToRgb`\n\t// Converts an HSV color value to RGB.\n\t// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n\t// *Returns:* { r, g, b } in the set [0, 255]\n\t function hsvToRgb(h, s, v) {\n\t\n\t    h = bound01(h, 360) * 6;\n\t    s = bound01(s, 100);\n\t    v = bound01(v, 100);\n\t\n\t    var i = Math.floor(h),\n\t        f = h - i,\n\t        p = v * (1 - s),\n\t        q = v * (1 - f * s),\n\t        t = v * (1 - (1 - f) * s),\n\t        mod = i % 6,\n\t        r = [v, q, p, p, t, v][mod],\n\t        g = [t, v, v, q, p, p][mod],\n\t        b = [p, p, t, v, v, q][mod];\n\t\n\t    return { r: r * 255, g: g * 255, b: b * 255 };\n\t}\n\t\n\t// `rgbToHex`\n\t// Converts an RGB color to hex\n\t// Assumes r, g, and b are contained in the set [0, 255]\n\t// Returns a 3 or 6 character hex\n\tfunction rgbToHex(r, g, b, allow3Char) {\n\t\n\t    var hex = [\n\t        pad2(mathRound(r).toString(16)),\n\t        pad2(mathRound(g).toString(16)),\n\t        pad2(mathRound(b).toString(16))\n\t    ];\n\t\n\t    // Return a 3 character hex if possible\n\t    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n\t        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n\t    }\n\t\n\t    return hex.join(\"\");\n\t}\n\t\n\t// `rgbaToHex`\n\t// Converts an RGBA color plus alpha transparency to hex\n\t// Assumes r, g, b are contained in the set [0, 255] and\n\t// a in [0, 1]. Returns a 4 or 8 character rgba hex\n\tfunction rgbaToHex(r, g, b, a, allow4Char) {\n\t\n\t    var hex = [\n\t        pad2(mathRound(r).toString(16)),\n\t        pad2(mathRound(g).toString(16)),\n\t        pad2(mathRound(b).toString(16)),\n\t        pad2(convertDecimalToHex(a))\n\t    ];\n\t\n\t    // Return a 4 character hex if possible\n\t    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n\t        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n\t    }\n\t\n\t    return hex.join(\"\");\n\t}\n\t\n\t// `rgbaToArgbHex`\n\t// Converts an RGBA color to an ARGB Hex8 string\n\t// Rarely used, but required for \"toFilter()\"\n\tfunction rgbaToArgbHex(r, g, b, a) {\n\t\n\t    var hex = [\n\t        pad2(convertDecimalToHex(a)),\n\t        pad2(mathRound(r).toString(16)),\n\t        pad2(mathRound(g).toString(16)),\n\t        pad2(mathRound(b).toString(16))\n\t    ];\n\t\n\t    return hex.join(\"\");\n\t}\n\t\n\t// `equals`\n\t// Can be called with any tinycolor input\n\ttinycolor.equals = function (color1, color2) {\n\t    if (!color1 || !color2) { return false; }\n\t    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n\t};\n\t\n\ttinycolor.random = function() {\n\t    return tinycolor.fromRatio({\n\t        r: mathRandom(),\n\t        g: mathRandom(),\n\t        b: mathRandom()\n\t    });\n\t};\n\t\n\t\n\t// Modification Functions\n\t// ----------------------\n\t// Thanks to less.js for some of the basics here\n\t// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\t\n\tfunction desaturate(color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.s -= amount / 100;\n\t    hsl.s = clamp01(hsl.s);\n\t    return tinycolor(hsl);\n\t}\n\t\n\tfunction saturate(color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.s += amount / 100;\n\t    hsl.s = clamp01(hsl.s);\n\t    return tinycolor(hsl);\n\t}\n\t\n\tfunction greyscale(color) {\n\t    return tinycolor(color).desaturate(100);\n\t}\n\t\n\tfunction lighten (color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.l += amount / 100;\n\t    hsl.l = clamp01(hsl.l);\n\t    return tinycolor(hsl);\n\t}\n\t\n\tfunction brighten(color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var rgb = tinycolor(color).toRgb();\n\t    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n\t    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n\t    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n\t    return tinycolor(rgb);\n\t}\n\t\n\tfunction darken (color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.l -= amount / 100;\n\t    hsl.l = clamp01(hsl.l);\n\t    return tinycolor(hsl);\n\t}\n\t\n\t// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n\t// Values outside of this range will be wrapped into this range.\n\tfunction spin(color, amount) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    var hue = (hsl.h + amount) % 360;\n\t    hsl.h = hue < 0 ? 360 + hue : hue;\n\t    return tinycolor(hsl);\n\t}\n\t\n\t// Combination Functions\n\t// ---------------------\n\t// Thanks to jQuery xColor for some of the ideas behind these\n\t// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\t\n\tfunction complement(color) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.h = (hsl.h + 180) % 360;\n\t    return tinycolor(hsl);\n\t}\n\t\n\tfunction triad(color) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    var h = hsl.h;\n\t    return [\n\t        tinycolor(color),\n\t        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n\t        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n\t    ];\n\t}\n\t\n\tfunction tetrad(color) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    var h = hsl.h;\n\t    return [\n\t        tinycolor(color),\n\t        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n\t        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n\t        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n\t    ];\n\t}\n\t\n\tfunction splitcomplement(color) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    var h = hsl.h;\n\t    return [\n\t        tinycolor(color),\n\t        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n\t        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n\t    ];\n\t}\n\t\n\tfunction analogous(color, results, slices) {\n\t    results = results || 6;\n\t    slices = slices || 30;\n\t\n\t    var hsl = tinycolor(color).toHsl();\n\t    var part = 360 / slices;\n\t    var ret = [tinycolor(color)];\n\t\n\t    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n\t        hsl.h = (hsl.h + part) % 360;\n\t        ret.push(tinycolor(hsl));\n\t    }\n\t    return ret;\n\t}\n\t\n\tfunction monochromatic(color, results) {\n\t    results = results || 6;\n\t    var hsv = tinycolor(color).toHsv();\n\t    var h = hsv.h, s = hsv.s, v = hsv.v;\n\t    var ret = [];\n\t    var modification = 1 / results;\n\t\n\t    while (results--) {\n\t        ret.push(tinycolor({ h: h, s: s, v: v}));\n\t        v = (v + modification) % 1;\n\t    }\n\t\n\t    return ret;\n\t}\n\t\n\t// Utility Functions\n\t// ---------------------\n\t\n\ttinycolor.mix = function(color1, color2, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 50);\n\t\n\t    var rgb1 = tinycolor(color1).toRgb();\n\t    var rgb2 = tinycolor(color2).toRgb();\n\t\n\t    var p = amount / 100;\n\t\n\t    var rgba = {\n\t        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n\t        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n\t        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n\t        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n\t    };\n\t\n\t    return tinycolor(rgba);\n\t};\n\t\n\t\n\t// Readability Functions\n\t// ---------------------\n\t// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\t\n\t// `contrast`\n\t// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n\ttinycolor.readability = function(color1, color2) {\n\t    var c1 = tinycolor(color1);\n\t    var c2 = tinycolor(color2);\n\t    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n\t};\n\t\n\t// `isReadable`\n\t// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n\t// The third argument is an optional Object.\n\t//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n\t//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n\t// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\t\n\t// *Example*\n\t//    tinycolor.isReadable(\"#000\", \"#111\") => false\n\t//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n\ttinycolor.isReadable = function(color1, color2, wcag2) {\n\t    var readability = tinycolor.readability(color1, color2);\n\t    var wcag2Parms, out;\n\t\n\t    out = false;\n\t\n\t    wcag2Parms = validateWCAG2Parms(wcag2);\n\t    switch (wcag2Parms.level + wcag2Parms.size) {\n\t        case \"AAsmall\":\n\t        case \"AAAlarge\":\n\t            out = readability >= 4.5;\n\t            break;\n\t        case \"AAlarge\":\n\t            out = readability >= 3;\n\t            break;\n\t        case \"AAAsmall\":\n\t            out = readability >= 7;\n\t            break;\n\t    }\n\t    return out;\n\t\n\t};\n\t\n\t// `mostReadable`\n\t// Given a base color and a list of possible foreground or background\n\t// colors for that base, returns the most readable color.\n\t// Optionally returns Black or White if the most readable color is unreadable.\n\t// *Example*\n\t//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n\t//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n\t//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n\t//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n\ttinycolor.mostReadable = function(baseColor, colorList, args) {\n\t    var bestColor = null;\n\t    var bestScore = 0;\n\t    var readability;\n\t    var includeFallbackColors, level, size ;\n\t    args = args || {};\n\t    includeFallbackColors = args.includeFallbackColors ;\n\t    level = args.level;\n\t    size = args.size;\n\t\n\t    for (var i= 0; i < colorList.length ; i++) {\n\t        readability = tinycolor.readability(baseColor, colorList[i]);\n\t        if (readability > bestScore) {\n\t            bestScore = readability;\n\t            bestColor = tinycolor(colorList[i]);\n\t        }\n\t    }\n\t\n\t    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n\t        return bestColor;\n\t    }\n\t    else {\n\t        args.includeFallbackColors=false;\n\t        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n\t    }\n\t};\n\t\n\t\n\t// Big List of Colors\n\t// ------------------\n\t// <http://www.w3.org/TR/css3-color/#svg-color>\n\tvar names = tinycolor.names = {\n\t    aliceblue: \"f0f8ff\",\n\t    antiquewhite: \"faebd7\",\n\t    aqua: \"0ff\",\n\t    aquamarine: \"7fffd4\",\n\t    azure: \"f0ffff\",\n\t    beige: \"f5f5dc\",\n\t    bisque: \"ffe4c4\",\n\t    black: \"000\",\n\t    blanchedalmond: \"ffebcd\",\n\t    blue: \"00f\",\n\t    blueviolet: \"8a2be2\",\n\t    brown: \"a52a2a\",\n\t    burlywood: \"deb887\",\n\t    burntsienna: \"ea7e5d\",\n\t    cadetblue: \"5f9ea0\",\n\t    chartreuse: \"7fff00\",\n\t    chocolate: \"d2691e\",\n\t    coral: \"ff7f50\",\n\t    cornflowerblue: \"6495ed\",\n\t    cornsilk: \"fff8dc\",\n\t    crimson: \"dc143c\",\n\t    cyan: \"0ff\",\n\t    darkblue: \"00008b\",\n\t    darkcyan: \"008b8b\",\n\t    darkgoldenrod: \"b8860b\",\n\t    darkgray: \"a9a9a9\",\n\t    darkgreen: \"006400\",\n\t    darkgrey: \"a9a9a9\",\n\t    darkkhaki: \"bdb76b\",\n\t    darkmagenta: \"8b008b\",\n\t    darkolivegreen: \"556b2f\",\n\t    darkorange: \"ff8c00\",\n\t    darkorchid: \"9932cc\",\n\t    darkred: \"8b0000\",\n\t    darksalmon: \"e9967a\",\n\t    darkseagreen: \"8fbc8f\",\n\t    darkslateblue: \"483d8b\",\n\t    darkslategray: \"2f4f4f\",\n\t    darkslategrey: \"2f4f4f\",\n\t    darkturquoise: \"00ced1\",\n\t    darkviolet: \"9400d3\",\n\t    deeppink: \"ff1493\",\n\t    deepskyblue: \"00bfff\",\n\t    dimgray: \"696969\",\n\t    dimgrey: \"696969\",\n\t    dodgerblue: \"1e90ff\",\n\t    firebrick: \"b22222\",\n\t    floralwhite: \"fffaf0\",\n\t    forestgreen: \"228b22\",\n\t    fuchsia: \"f0f\",\n\t    gainsboro: \"dcdcdc\",\n\t    ghostwhite: \"f8f8ff\",\n\t    gold: \"ffd700\",\n\t    goldenrod: \"daa520\",\n\t    gray: \"808080\",\n\t    green: \"008000\",\n\t    greenyellow: \"adff2f\",\n\t    grey: \"808080\",\n\t    honeydew: \"f0fff0\",\n\t    hotpink: \"ff69b4\",\n\t    indianred: \"cd5c5c\",\n\t    indigo: \"4b0082\",\n\t    ivory: \"fffff0\",\n\t    khaki: \"f0e68c\",\n\t    lavender: \"e6e6fa\",\n\t    lavenderblush: \"fff0f5\",\n\t    lawngreen: \"7cfc00\",\n\t    lemonchiffon: \"fffacd\",\n\t    lightblue: \"add8e6\",\n\t    lightcoral: \"f08080\",\n\t    lightcyan: \"e0ffff\",\n\t    lightgoldenrodyellow: \"fafad2\",\n\t    lightgray: \"d3d3d3\",\n\t    lightgreen: \"90ee90\",\n\t    lightgrey: \"d3d3d3\",\n\t    lightpink: \"ffb6c1\",\n\t    lightsalmon: \"ffa07a\",\n\t    lightseagreen: \"20b2aa\",\n\t    lightskyblue: \"87cefa\",\n\t    lightslategray: \"789\",\n\t    lightslategrey: \"789\",\n\t    lightsteelblue: \"b0c4de\",\n\t    lightyellow: \"ffffe0\",\n\t    lime: \"0f0\",\n\t    limegreen: \"32cd32\",\n\t    linen: \"faf0e6\",\n\t    magenta: \"f0f\",\n\t    maroon: \"800000\",\n\t    mediumaquamarine: \"66cdaa\",\n\t    mediumblue: \"0000cd\",\n\t    mediumorchid: \"ba55d3\",\n\t    mediumpurple: \"9370db\",\n\t    mediumseagreen: \"3cb371\",\n\t    mediumslateblue: \"7b68ee\",\n\t    mediumspringgreen: \"00fa9a\",\n\t    mediumturquoise: \"48d1cc\",\n\t    mediumvioletred: \"c71585\",\n\t    midnightblue: \"191970\",\n\t    mintcream: \"f5fffa\",\n\t    mistyrose: \"ffe4e1\",\n\t    moccasin: \"ffe4b5\",\n\t    navajowhite: \"ffdead\",\n\t    navy: \"000080\",\n\t    oldlace: \"fdf5e6\",\n\t    olive: \"808000\",\n\t    olivedrab: \"6b8e23\",\n\t    orange: \"ffa500\",\n\t    orangered: \"ff4500\",\n\t    orchid: \"da70d6\",\n\t    palegoldenrod: \"eee8aa\",\n\t    palegreen: \"98fb98\",\n\t    paleturquoise: \"afeeee\",\n\t    palevioletred: \"db7093\",\n\t    papayawhip: \"ffefd5\",\n\t    peachpuff: \"ffdab9\",\n\t    peru: \"cd853f\",\n\t    pink: \"ffc0cb\",\n\t    plum: \"dda0dd\",\n\t    powderblue: \"b0e0e6\",\n\t    purple: \"800080\",\n\t    rebeccapurple: \"663399\",\n\t    red: \"f00\",\n\t    rosybrown: \"bc8f8f\",\n\t    royalblue: \"4169e1\",\n\t    saddlebrown: \"8b4513\",\n\t    salmon: \"fa8072\",\n\t    sandybrown: \"f4a460\",\n\t    seagreen: \"2e8b57\",\n\t    seashell: \"fff5ee\",\n\t    sienna: \"a0522d\",\n\t    silver: \"c0c0c0\",\n\t    skyblue: \"87ceeb\",\n\t    slateblue: \"6a5acd\",\n\t    slategray: \"708090\",\n\t    slategrey: \"708090\",\n\t    snow: \"fffafa\",\n\t    springgreen: \"00ff7f\",\n\t    steelblue: \"4682b4\",\n\t    tan: \"d2b48c\",\n\t    teal: \"008080\",\n\t    thistle: \"d8bfd8\",\n\t    tomato: \"ff6347\",\n\t    turquoise: \"40e0d0\",\n\t    violet: \"ee82ee\",\n\t    wheat: \"f5deb3\",\n\t    white: \"fff\",\n\t    whitesmoke: \"f5f5f5\",\n\t    yellow: \"ff0\",\n\t    yellowgreen: \"9acd32\"\n\t};\n\t\n\t// Make it easy to access colors via `hexNames[hex]`\n\tvar hexNames = tinycolor.hexNames = flip(names);\n\t\n\t\n\t// Utilities\n\t// ---------\n\t\n\t// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n\tfunction flip(o) {\n\t    var flipped = { };\n\t    for (var i in o) {\n\t        if (o.hasOwnProperty(i)) {\n\t            flipped[o[i]] = i;\n\t        }\n\t    }\n\t    return flipped;\n\t}\n\t\n\t// Return a valid alpha value [0,1] with all invalid values being set to 1\n\tfunction boundAlpha(a) {\n\t    a = parseFloat(a);\n\t\n\t    if (isNaN(a) || a < 0 || a > 1) {\n\t        a = 1;\n\t    }\n\t\n\t    return a;\n\t}\n\t\n\t// Take input from [0, n] and return it as [0, 1]\n\tfunction bound01(n, max) {\n\t    if (isOnePointZero(n)) { n = \"100%\"; }\n\t\n\t    var processPercent = isPercentage(n);\n\t    n = mathMin(max, mathMax(0, parseFloat(n)));\n\t\n\t    // Automatically convert percentage into number\n\t    if (processPercent) {\n\t        n = parseInt(n * max, 10) / 100;\n\t    }\n\t\n\t    // Handle floating point rounding errors\n\t    if ((Math.abs(n - max) < 0.000001)) {\n\t        return 1;\n\t    }\n\t\n\t    // Convert into [0, 1] range if it isn't already\n\t    return (n % max) / parseFloat(max);\n\t}\n\t\n\t// Force a number between 0 and 1\n\tfunction clamp01(val) {\n\t    return mathMin(1, mathMax(0, val));\n\t}\n\t\n\t// Parse a base-16 hex value into a base-10 integer\n\tfunction parseIntFromHex(val) {\n\t    return parseInt(val, 16);\n\t}\n\t\n\t// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n\t// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n\tfunction isOnePointZero(n) {\n\t    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n\t}\n\t\n\t// Check to see if string passed in is a percentage\n\tfunction isPercentage(n) {\n\t    return typeof n === \"string\" && n.indexOf('%') != -1;\n\t}\n\t\n\t// Force a hex value to have 2 characters\n\tfunction pad2(c) {\n\t    return c.length == 1 ? '0' + c : '' + c;\n\t}\n\t\n\t// Replace a decimal with it's percentage value\n\tfunction convertToPercentage(n) {\n\t    if (n <= 1) {\n\t        n = (n * 100) + \"%\";\n\t    }\n\t\n\t    return n;\n\t}\n\t\n\t// Converts a decimal to a hex value\n\tfunction convertDecimalToHex(d) {\n\t    return Math.round(parseFloat(d) * 255).toString(16);\n\t}\n\t// Converts a hex value to a decimal\n\tfunction convertHexToDecimal(h) {\n\t    return (parseIntFromHex(h) / 255);\n\t}\n\t\n\tvar matchers = (function() {\n\t\n\t    // <http://www.w3.org/TR/css3-values/#integers>\n\t    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\t\n\t    // <http://www.w3.org/TR/css3-values/#number-value>\n\t    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\t\n\t    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n\t    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\t\n\t    // Actual matching.\n\t    // Parentheses and commas are optional, but not required.\n\t    // Whitespace can take the place of commas or opening paren\n\t    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\t    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\t\n\t    return {\n\t        CSS_UNIT: new RegExp(CSS_UNIT),\n\t        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n\t        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n\t        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n\t        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n\t        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n\t        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n\t        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n\t        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n\t        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n\t        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n\t    };\n\t})();\n\t\n\t// `isValidCSSUnit`\n\t// Take in a single string / number and check to see if it looks like a CSS unit\n\t// (see `matchers` above for definition).\n\tfunction isValidCSSUnit(color) {\n\t    return !!matchers.CSS_UNIT.exec(color);\n\t}\n\t\n\t// `stringInputToObject`\n\t// Permissive string parsing.  Take in a number of formats, and output an object\n\t// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n\tfunction stringInputToObject(color) {\n\t\n\t    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n\t    var named = false;\n\t    if (names[color]) {\n\t        color = names[color];\n\t        named = true;\n\t    }\n\t    else if (color == 'transparent') {\n\t        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n\t    }\n\t\n\t    // Try to match string input using regular expressions.\n\t    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n\t    // Just return an object and let the conversion functions handle that.\n\t    // This way the result will be the same whether the tinycolor is initialized with string or object.\n\t    var match;\n\t    if ((match = matchers.rgb.exec(color))) {\n\t        return { r: match[1], g: match[2], b: match[3] };\n\t    }\n\t    if ((match = matchers.rgba.exec(color))) {\n\t        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n\t    }\n\t    if ((match = matchers.hsl.exec(color))) {\n\t        return { h: match[1], s: match[2], l: match[3] };\n\t    }\n\t    if ((match = matchers.hsla.exec(color))) {\n\t        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n\t    }\n\t    if ((match = matchers.hsv.exec(color))) {\n\t        return { h: match[1], s: match[2], v: match[3] };\n\t    }\n\t    if ((match = matchers.hsva.exec(color))) {\n\t        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n\t    }\n\t    if ((match = matchers.hex8.exec(color))) {\n\t        return {\n\t            r: parseIntFromHex(match[1]),\n\t            g: parseIntFromHex(match[2]),\n\t            b: parseIntFromHex(match[3]),\n\t            a: convertHexToDecimal(match[4]),\n\t            format: named ? \"name\" : \"hex8\"\n\t        };\n\t    }\n\t    if ((match = matchers.hex6.exec(color))) {\n\t        return {\n\t            r: parseIntFromHex(match[1]),\n\t            g: parseIntFromHex(match[2]),\n\t            b: parseIntFromHex(match[3]),\n\t            format: named ? \"name\" : \"hex\"\n\t        };\n\t    }\n\t    if ((match = matchers.hex4.exec(color))) {\n\t        return {\n\t            r: parseIntFromHex(match[1] + '' + match[1]),\n\t            g: parseIntFromHex(match[2] + '' + match[2]),\n\t            b: parseIntFromHex(match[3] + '' + match[3]),\n\t            a: convertHexToDecimal(match[4] + '' + match[4]),\n\t            format: named ? \"name\" : \"hex8\"\n\t        };\n\t    }\n\t    if ((match = matchers.hex3.exec(color))) {\n\t        return {\n\t            r: parseIntFromHex(match[1] + '' + match[1]),\n\t            g: parseIntFromHex(match[2] + '' + match[2]),\n\t            b: parseIntFromHex(match[3] + '' + match[3]),\n\t            format: named ? \"name\" : \"hex\"\n\t        };\n\t    }\n\t\n\t    return false;\n\t}\n\t\n\tfunction validateWCAG2Parms(parms) {\n\t    // return valid WCAG2 parms for isReadable.\n\t    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n\t    var level, size;\n\t    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n\t    level = (parms.level || \"AA\").toUpperCase();\n\t    size = (parms.size || \"small\").toLowerCase();\n\t    if (level !== \"AA\" && level !== \"AAA\") {\n\t        level = \"AA\";\n\t    }\n\t    if (size !== \"small\" && size !== \"large\") {\n\t        size = \"small\";\n\t    }\n\t    return {\"level\":level, \"size\":size};\n\t}\n\t\n\t// Node: Export function\n\tif (typeof module !== \"undefined\" && module.exports) {\n\t    module.exports = tinycolor;\n\t}\n\t// AMD/requirejs: Define the module\n\telse if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {return tinycolor;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t// Browser: Expose to window\n\telse {\n\t    window.tinycolor = tinycolor;\n\t}\n\t\n\t})(Math);\n\n\n/***/ }),\n\n/***/ 98:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _reactEmotion = __webpack_require__(9);\n\t\n\tvar _reactEmotion2 = _interopRequireDefault(_reactEmotion);\n\t\n\tvar _tinycolor = __webpack_require__(95);\n\t\n\tvar _tinycolor2 = _interopRequireDefault(_tinycolor);\n\t\n\tvar _palette = __webpack_require__(11);\n\t\n\tvar _palette2 = _interopRequireDefault(_palette);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = /*#__PURE__*/(0, _reactEmotion2.default)('h2', {\n\t  target: 'enyzoum0'\n\t})({\n\t  color: (0, _tinycolor2.default)(_palette2.default.dark).lighten(10).toHexString(),\n\t  fontWeight: 'normal',\n\t  fontSize: '1.25rem',\n\t  margin: 0\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 277:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.query = undefined;\n\t\n\tvar _styled;\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactEmotion = __webpack_require__(9);\n\t\n\tvar _reactEmotion2 = _interopRequireDefault(_reactEmotion);\n\t\n\tvar _reactHelmet = __webpack_require__(49);\n\t\n\tvar _reactHelmet2 = _interopRequireDefault(_reactHelmet);\n\t\n\tvar _gatsbyLink = __webpack_require__(44);\n\t\n\tvar _gatsbyLink2 = _interopRequireDefault(_gatsbyLink);\n\t\n\tvar _H = __webpack_require__(32);\n\t\n\tvar _H2 = _interopRequireDefault(_H);\n\t\n\tvar _H3 = __webpack_require__(98);\n\t\n\tvar _H4 = _interopRequireDefault(_H3);\n\t\n\tvar _breakpoints = __webpack_require__(33);\n\t\n\tvar _breakpoints2 = _interopRequireDefault(_breakpoints);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Layout = /*#__PURE__*/(0, _reactEmotion2.default)('div', {\n\t  target: 'e26bfyh0'\n\t})((_styled = {\n\t  display: 'grid',\n\t  gridTemplateColumns: '8rem auto'\n\t}, _styled[(0, _breakpoints.smallerThan)(_breakpoints2.default.small)] = {\n\t  display: 'flex',\n\t  flexDirection: 'column'\n\t}, _styled));\n\t\n\tvar TitleBlock = /*#__PURE__*/(0, _reactEmotion2.default)('div', {\n\t  target: 'e26bfyh1'\n\t})({\n\t  alignItems: 'baseline',\n\t  borderBottom: '1px solid',\n\t  display: 'flex',\n\t  flexWrap: 'wrap',\n\t  justifyContent: 'space-between',\n\t  marginBottom: '2rem',\n\t  paddingBottom: '1rem'\n\t});\n\t\n\texports.default = function (_ref) {\n\t  var _ref$data = _ref.data,\n\t      siteMetadata = _ref$data.site.siteMetadata,\n\t      post = _ref$data.markdownRemark;\n\t  return _react2.default.createElement(\n\t    'article',\n\t    null,\n\t    _react2.default.createElement(_reactHelmet2.default, { title: siteMetadata.title + ' - ' + post.frontmatter.title }),\n\t    _react2.default.createElement(\n\t      Layout,\n\t      null,\n\t      _react2.default.createElement(\n\t        'header',\n\t        { className: /*#__PURE__*/ /*#__PURE__*/(0, _reactEmotion.css)({ display: 'contents' }) },\n\t        _react2.default.createElement(\n\t          'nav',\n\t          null,\n\t          _react2.default.createElement(\n\t            _gatsbyLink2.default,\n\t            { to: '/blog/' },\n\t            '\\u2190 Back'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          TitleBlock,\n\t          null,\n\t          _react2.default.createElement(\n\t            _H2.default,\n\t            { className: /*#__PURE__*/ /*#__PURE__*/(0, _reactEmotion.css)({ marginRight: '0.5rem' }) },\n\t            post.frontmatter.title\n\t          ),\n\t          _react2.default.createElement(\n\t            _H4.default,\n\t            null,\n\t            post.frontmatter.date\n\t          )\n\t        )\n\t      ),\n\t      _react2.default.createElement('div', {\n\t        className: /*#__PURE__*/ /*#__PURE__*/(0, _reactEmotion.css)({ gridColumn: 2 }),\n\t        dangerouslySetInnerHTML: { __html: post.html }\n\t      })\n\t    )\n\t  );\n\t};\n\t\n\tvar query = exports.query = '** extracted graphql fragment **';\n\n/***/ }),\n\n/***/ 33:\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.default = {\n\t  small: '666px'\n\t};\n\tvar smallerThan = exports.smallerThan = function smallerThan(breakpoint) {\n\t  return '@media (max-width: ' + breakpoint + ')';\n\t};\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.default = {\n\t  primary: '#D73C65',\n\t  primaryDark: '#8A1937',\n\t  light: '#F5F5FA',\n\t  dark: '#383740',\n\t  xDark: '#2D2C33'\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-templates-blog-post-js-18bc471da8298aa9baf4.js","// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinycolor2/tinycolor.js\n// module id = 95\n// module chunks = 107818501498521 152176518627018","import styled from 'react-emotion'\nimport tinycolor from 'tinycolor2'\n\nimport palette from '../../utils/palette'\n\nexport default styled('h2')({\n  color: tinycolor(palette.dark)\n    .lighten(10)\n    .toHexString(),\n  fontWeight: 'normal',\n  fontSize: '1.25rem',\n  margin: 0,\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/H2/index.js","import React from 'react'\nimport styled, { css } from 'react-emotion'\nimport Helmet from 'react-helmet'\nimport Link from 'gatsby-link'\n\nimport H1 from '../components/H1'\nimport H2 from '../components/H2'\nimport breakpoints, { smallerThan } from '../utils/breakpoints'\n\nconst Layout = styled('div')({\n  display: 'grid',\n  gridTemplateColumns: '8rem auto',\n  [smallerThan(breakpoints.small)]: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n})\n\nconst TitleBlock = styled('div')({\n  alignItems: 'baseline',\n  borderBottom: '1px solid',\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-between',\n  marginBottom: '2rem',\n  paddingBottom: '1rem',\n})\n\nexport default ({ data: { site: { siteMetadata }, markdownRemark: post } }) => (\n  <article>\n    <Helmet title={`${siteMetadata.title} - ${post.frontmatter.title}`} />\n    <Layout>\n      <header className={css({ display: 'contents' })}>\n        <nav>\n          <Link to=\"/blog/\">← Back</Link>\n        </nav>\n        <TitleBlock>\n          <H1 className={css({ marginRight: '0.5rem' })}>\n            {post.frontmatter.title}\n          </H1>\n          <H2>{post.frontmatter.date}</H2>\n        </TitleBlock>\n      </header>\n      <div\n        className={css({ gridColumn: 2 })}\n        dangerouslySetInnerHTML={{ __html: post.html }}\n      />\n    </Layout>\n  </article>\n)\n\nexport const query = graphql`\n  query BlogPostQuery($slug: String!) {\n    ...SiteMetadata\n\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n      }\n    }\n  }\n`\n\n\n\n// WEBPACK FOOTER //\n// ./src/templates/blogPost.js","export default {\n  small: '666px',\n}\n\nexport const smallerThan = breakpoint => `@media (max-width: ${breakpoint})`\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/breakpoints.js","export default {\n  primary: '#D73C65',\n  primaryDark: '#8A1937',\n  light: '#F5F5FA',\n  dark: '#383740',\n  xDark: '#2D2C33',\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/palette.js"],"sourceRoot":""}